# read the log2 first,only get bipedal's data,the data format is a list [STRIDE_LENGTH,LEG_LENGTH],name as the key of dict
#formular ((STRIDE_LENGTH / LEG_LENGTH) - 1) * SQRT(LEG_LENGTH * g)

dino_dict={}

with open('log2.csv', 'r') as file:
    for row in file.readlines():
        temp=row.replace("\n","").split(",")
        if temp[-1]=="bipedal":dino_dict[temp[0]]=[float(temp[1])]
with open('log1.csv', 'r') as file:
    for row in file.readlines():
        temp=row.replace("\n","").split(",")
        if temp[0] in dino_dict: dino_dict[temp[0]].append(float(temp[1]))
print dino_dict
#fuction to check the speed
def caulatespeed(dict1):
    res=[]
    for i in dict1.keys():
        if len(dict1[i])>1:
            speed=((dict1[i][0]/dict1[i][1])-1)*((dict1[i][1]*9.8)**0.5)
            res.append([i,speed])
    res.sort(key=lambda x:x[1],reverse=True)
    return [i[0] for i in res]
print caulatespeed(dino_dict)

def addtwostring(str1,str2):
    if not str1 and str2:return str2
    if not str2 and str1:return str1
    if len(str2)>len(str1):return addtwostring(str2,str1)
    l1=list(str1)
    l2=["0"]*(len(str1)-len(str2))+list(str2)
    carry=0
    sumstr=""
    for i in range(len(l1)-1,-1,-1):
        temp=int(l1[i])+int(l2[i])+carry
        sumstr+=str(temp%10)
        if temp>=10:carry=1
        else:carry=0
    if carry==1:
        return "1"+sumstr[::-1]
    return sumstr[::-1]

print(addtwostring("9999999","2"))




#sort
def bubble(arr):
    def swap(i,j):
        arr[i],arr[j]=arr[j],arr[i]
    n=len(arr)
    swapped=True
    x=-1
    while swapped :
        swapped=False
        x=x+1
        for i in range(1,n-x):
            if arr[i-1]>arr[i]:
                swap(i-1,i)
                swapped=True
    return arr

import commands
import threading

#host->ip
hostlist=[]
with open('log.csv', 'r') as file:
    for row in file.readlines():
        temp=row.replace("\n","").split(",")
        if temp[0].isalnum():hostlist.append(temp[1])
res = {}
def findipadd(str1):
    global res
    cmd = "nslookup " + str1
    _, result = commands.getstatusoutput(cmd)
    temp = result.replace("\t", '').split("\n")
    if len(temp)>5:res[str1]=temp[-2].split(" ")[-1]
    else:res[str1]='0.0.0.0'
    return

if __name__ == '__main__':
    instance = []
    for i in hostlist:
        trd = threading.Thread(target=findipadd, args=(i,))
        trd.start()
        instance.append(trd)
    for thread in instance:
        thread.join()
    print res

class Solution(object):
    def smallerNumbersThanCurrent(self, nums):
        dict1={}
        for i in  nums:
            dict1[i]=dict1.get(i,0)+1
        temp=sorted(dict1.items(),key=lambda x:x[0])
        sum1,dict2=0,{}
        for i in temp:
            dict2[i[0]]=sum1
            sum1+=i[1]
        return [dict2[i] for i in nums]
'''
from pprint import pprint

from netmiko import ConnectHandler

def send_show_command(device, commands):
    result = {}
    try:
        with ConnectHandler(**device) as ssh:
            ssh.enable()
            for command in commands:
                output = ssh.send_command(command)
                result[command] = output
        return result
    except :
        print("error")

if __name__ == "__main__":
    device = {
        "device_type": "juniper",
        "ip": "10.85.174.59",
        "username": "labroot",
        "password": "lab123",
        "port":"22"
    }
    result = send_show_command(device, ["show arp","show route"])
    #pprint(result, width=120)
    print(result['show route'])
'''


def subarraySum(self, nums, k):
    sums = {0: 1}  # prefix sum array
    res = s = 0
    for n in nums:
        s += n  # increment current sum
        res += sums.get(s - k, 0)  # check if there is a prefix subarray we can take out to reach k
        sums[s] = sums.get(s, 0) + 1  # add current sum to sum count
    return res


class Solution(object):
    def toGoatLatin(self, S):
        local_set=set(["a","e","i","o","u","A","E","I","O","U"])
        list1=S.split(" ")
        for i,temp in enumerate(list1):
            if temp[0] in local_set:list1[i]=temp+"ma"+"a"*(i+1)
            else:list1[i]=temp[1:]+temp[0]+"ma"+"a"*(i+1)
        return " ".join(list1)

class Solution(object):
    def numDecodings(self, s):
        if not s or s[0]=="0":
            return 0
        dp = [0 for x in range(len(s) + 1)]
        dp[0] = 1
        dp[1] = 1
        for i in range(2, len(s) + 1):
            if 0 < int(s[i-1]) <= 9:
                dp[i] += dp[i - 1]
            if 10<=int(s[i-2:i]) <= 26:
                dp[i] += dp[i - 2]
        return dp[-1]
